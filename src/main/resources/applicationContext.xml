<?xml version="1.0" encoding="UTF-8"?>
<beans
		xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:p="http://www.springframework.org/schema/p"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<!-- 支持注解 -->
	<context:annotation-config/>

	<!-- 加载加密后的配置文件
	<bean id="propertyConfigurer" class="com.kaigekeji.zhinengshibie.util.share.Encrypt">
		<property name="location" value="classpath:jdbc.properties"/>
	</bean>
	-->

	<!-- 加载properties文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties"/>
	</bean>



	<!-- 自动扫描的包 -->
	<context:component-scan base-package="com" use-default-filters="false">
		<!-- 通过注解去过滤被扫描的包 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>


	<!-- DAO接口所在包名，Spring会自动查找其下的类  就不需要创建dao.impl包了 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		  p:basePackage="com.kaigekeji.zhinengshibie.dao"
		  p:sqlSessionFactoryBeanName="sqlSessionFactory"
	/>

	<!-- 数据源,注入我们需要的数据源 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" scope="prototype">
		<property name="driverClassName" value="${driverClass}"/>
		<property name="url" value="${url}"/>
		<property name="username" value="${username}"/>
		<property name="password" value="${password}"/>
	</bean>


	<!-- 配置 mybatis的SqlSessionFactory  及session工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" scope="prototype">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="mapperLocations" value="classpath:mapper/*.xml"/>
	</bean>
	<!-- 配置 SQLSessionTemplate 已封装了繁琐的数据操作 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>

	<!-- 事物管理 ,管理数据源事务处理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 使用注解管理事物 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>



	<!-- 采用自动扫描方式创建mapper bean -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com"/>
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
		<property name="annotationClass" value="org.springframework.stereotype.Repository"/>
	</bean>


	<!--redis数据库配置-->
<!--	<context:property-placeholder location="classpath:redis.properties" />-->

<!--	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
<!--		<property name="maxIdle" value="${redis.maxIdle}" />-->
<!--		<property name="maxActive" value="${redis.maxActive}" />-->
<!--		<property name="maxWait" value="${redis.maxWait}" />-->
<!--		<property name="testOnBorrow" value="${redis.testOnBorrow}" />-->
<!--	</bean>-->

<!--	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"-->
<!--		  p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}"  p:pool-config-ref="poolConfig"/>-->

<!--	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">-->
<!--		<property name="connectionFactory" 	ref="connectionFactory" />-->
<!--	</bean>-->

	<!-- 包含要注入的基本类型常量 -->
	<bean id="constant" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:constant.properties</value>
			</list>
		</property>
		<!-- 设置编码格式 -->
		<property name="fileEncoding" value="UTF-8"></property>
	</bean>
	<bean id="system" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:system.properties</value>
			</list>
		</property>
		<!-- 设置编码格式 -->
		<property name="fileEncoding" value="UTF-8"></property>
	</bean>

</beans>














